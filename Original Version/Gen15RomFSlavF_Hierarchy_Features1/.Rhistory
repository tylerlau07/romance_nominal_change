path = '//ul[@class="nav navbar-nav secondary-nav"]/li/a',
fun = xmlAttrs)
Alinks <- xpathSApply(
doc = doc,
path = '//div[@class="list-content"]/p/a',
fun = xmlAttrs)
Alinks
Alinks
fac <- htmlParse('http://statistics.berkeley.edu/people/faculty')
xpathSApply(
doc = fac,
path = '//h2[@class="field-content"]',
xmlValue)
nav_node
navbar_nodes
xmlValue)
xpathSApply(
doc = fac,
path = '//h2[@class="field-content"]',
xmlValue)
fac
xpathSApply(
doc = fac,
path = '//div[@class="views-field views-field-field-job-title"]',
xmlValue)
xpathSApply(
doc = fac,
path = '//div[@class="views-field views-field-field-location"]',
xmlValue)
xpathSApply(
doc = fac,
path = '//div[@class="views-field views-field-field-email"]',
xmlValue)
xpathSApply(
doc = fac,
path = '//div[@class="views-field views-field-title"]/h2/a',
xmlAttrs)
courses <- htmlParse('http://statistics.berkeley.edu/courses/fall-2015')
xmlRoot(courses)
top1 <- xmlRoot(courses)
xmlChildren(top1)
top1[[1]]
top1[[2]]
top1[[3]]
top1[[10]]
xpathSApply(
doc = courses,
path = '//div[@class="field field-name-field-course-title field-type-text field-label-hidden"]',
xmlValue)
xpathSApply(
doc = courses,
path = '//div[@class="course-section"]',
xmlValue)
# days and time
xpathSApply(
doc = courses,
path = '//div[@class="course-dayhour"]',
xmlValue)
xpathSApply(
doc = courses,
path = '//div[@class="course-room"]',
xmlValue)
xpathSApply(
doc = courses,
path = '//div[@class="course-credit"]',
xmlValue)
fac
names(fac)
top <- xmlRoot(fac)
names(top)
xmlName(top)
xpathSApply(doc = fac, path='head')
xpathSApply(doc = fac, path='head', xmlValue)
names(xmlChildren(top))
top[[1]]
top[[5]]
top[[2]]
top[[3]]
top[[2]]
library(readr)
library(stringr)
df <- read_csv("https://raw.githubusercontent.com/gastonstat/stat133/master/datasets/bike-accidents.csv")
head(df$DateTime)
set.seed(102030)
x <- sample(df$DateTime, size = 10)
x
x <- sample(df$DateTime, size = 10)
x
x
set.seed(102030)
x <- sample(df$DateTime, size = 10)
x
substr(x, start = 1, stop = 8)
as.numeric(substr(x, start = 1, stop = 2))
as.numeric(substr(x, start = 4, stop = 5))
substr(x, start = 7, stop = 8)
str_sub(x, 11, nchar(x))
str_sub(x, 11, nchar(x)-4)
str_sub(x, nchar(x)-3, nchar(x))
df
df$Date <- substr(df$DateTime, 1, 8)
df
df$Month <- substr(df$DateTime, 1, 2)
df$Month <- as.numeric(substr(df$DateTime, 1, 2))
df$Day <- as.numeric(substr(df$DateTime, 4, 5))
df$Year <- as.numeric(paste0(20, substr(df$DateTime, 7,8)))
df$DateTime
df$DateTime <- str_sub(df$DateTime, 11, nchar(df$DateTime))
top1
top1[[1]]
top1[[2]]
//Names
data.frame(rownames = c('category', 'count', 'prop'))
# This program will look at which specific words changed to what classes
library(readr)
library(plyr)
library(ggplot2)
library(reshape2)
### Read stats files ###
files = list.files(pattern = '\\.csv')
# We want to make a data frame showing what each word became, start with counts
df_wordcount <- data.frame()
# Add counts for each word
file_originfo <- read_csv(files[1])
# Original
for (i in 1:nrow(file_originfo)) {
word <- file_originfo$`Declined Noun`[i]
df_wordcount[word, 'OrigInfo'] <- file_originfo$`0`[i]
}
# This program will look at which specific words changed to what classes
library(readr)
library(plyr)
library(ggplot2)
library(reshape2)
### Read stats files ###
files = list.files(pattern = '\\.csv')
# We want to make a data frame showing what each word became, start with counts
df_wordcount <- data.frame()
# Add counts for each word
file_originfo <- read_csv(files[1])
# Original
for (i in 1:nrow(file_originfo)) {
word <- file_originfo$`Declined Noun`[i]
df_wordcount[word, 'OrigInfo'] <- file_originfo$`0`[i]
}
setwd("~/Documents/Documents/Linguistics/Papers/Romanian Slavic Contact/GenDecCaseNum/Gen15RomFSlavF_Hierarchy")
# This program will look at which specific words changed to what classes
library(readr)
library(plyr)
library(ggplot2)
library(reshape2)
### Read stats files ###
files = list.files(pattern = '\\.csv')
# We want to make a data frame showing what each word became, start with counts
df_wordcount <- data.frame()
# Add counts for each word
file_originfo <- read_csv(files[1])
# Original
for (i in 1:nrow(file_originfo)) {
word <- file_originfo$`Declined Noun`[i]
df_wordcount[word, 'OrigInfo'] <- file_originfo$`0`[i]
}
change_info <- unlist(strsplit(read[row, ncol(read)], ','))
for (file in files) {
read <- read_csv(file)
for (row in 1:nrow(read)) {
word <- read$`Declined Noun`[row]
# Generation 15 info (Gen, Dec, Case, Num)
final_info <- unlist(strsplit(read[row, ncol(read)], ','))
#     df_wordcount[word, ]
#     if (is.null(df_wordcount[word, c_gen_info])) {
#       df_wordcount[word, c_gen_info] <- 1
#     }
#     else {df_wordcount[word, c_gen_info] <- df_wordcount[word, c_gen_info] + 1 }
#     if (is.null(df_wordcount[word, c_dec_info])) {
#       df_wordcount[word, c_dec_info] <- 1
#     }
#     else {df_wordcount[word, c_dec_info] <- df_wordcount[word, c_dec_info] + 1 }
}
}
final_info
for (file in files) {
read <- read_csv(file)
for (row in 1:nrow(read)) {
word <- read$`Declined Noun`[row]
# Generation 15 info (Gen, Dec, Case, Num)
final_info <- unlist(strsplit(read[row, ncol(read)], ','))
gen <- final_info[1]
dec <- final_info[2]
case <- final_info[3]
num <- final_info[4]
# Assign
df_wordcount[word, gen] <- ifelse(is.null(df_wordcount[word, gen]), 0, df_wordcount[word, gen] + 1)
df_wordcount[word, dec] <- ifelse(is.null(df_wordcount[word, dec]), 0, df_wordcount[word,dec] + 1)
df_wordcount[word, paste(case, num, sep = ".")] <- ifelse(is.null(df_wordcount[word, paste(case, num, sep = ".")]), 0, df_wordcount[word, paste(case, num, sep = ".")] + 1)
}
}
View(df_wordcount)
for (row in 1:nrow(read)) {
word <- read$`Declined Noun`[row]
# Generation 15 info (Gen, Dec, Case, Num)
final_info <- unlist(strsplit(read[row, ncol(read)], ','))
gen <- final_info[1]
dec <- final_info[2]
case <- final_info[3]
num <- final_info[4]
print(word)
print(gen)}
word
df_wordcount[word, gen]
is.null(df_wordcount[word, gen])
is.na(df_wordcount[word, gen])
df_wordcount <- data.frame()
# Add counts for each word
file_originfo <- read_csv(files[1])
# Original
for (i in 1:nrow(file_originfo)) {
word <- file_originfo$`Declined Noun`[i]
df_wordcount[word, 'OrigInfo'] <- file_originfo$`0`[i]
}
df_wordcount[word,gen]
(is.null(df_wordcount[word,gen]))
(!is.numeric(df_wordcount[word,gen]))
is.numeric(0)
for (file in files) {
read <- read_csv(file)
for (row in 1:nrow(read)) {
word <- read$`Declined Noun`[row]
# Generation 15 info (Gen, Dec, Case, Num)
final_info <- unlist(strsplit(read[row, ncol(read)], ','))
gen <- final_info[1]
dec <- final_info[2]
case <- final_info[3]
num <- final_info[4]
# Assign
df_wordcount[word, gen] <- ifelse(!is.numeric(df_wordcount[word, gen]), 0, df_wordcount[word, gen] + 1)
df_wordcount[word, dec] <- ifelse(!is.numeric(df_wordcount[word, dec]), 0, df_wordcount[word, dec] + 1)
df_wordcount[word, paste(case, num, sep = ".")] <- ifelse(!is.numeric(df_wordcount[word, paste(case, num, sep = ".")]), 0, df_wordcount[word, paste(case, num, sep = ".")] + 1)
}
}
View(df_wordcount)
final_info
for (row in 1:nrow(read)) {
print(unlist(strsplit(read[row, ncol(read)], ',')))
}
for (row in 1:nrow(read)) {
print(read$`Declined Noun`[row])
print(unlist(strsplit(read[row, ncol(read)], ',')))
}
for (file in files) {
read <- read_csv(file)
for (row in 1:nrow(read)) {
word <- read$`Declined Noun`[row]
# Generation 15 info (Gen, Dec, Case, Num)
final_info <- unlist(strsplit(read[row, ncol(read)], ','))
gen <- final_info[1]
dec <- final_info[2]
case <- final_info[3]
num <- final_info[4]
# Assign
df_wordcount[word, gen] <- ifelse(!is.numeric(df_wordcount[word, gen]), 0, df_wordcount[word, gen] + 1)
print(df_wordcount[word, gen])
df_wordcount[word, dec] <- ifelse(!is.numeric(df_wordcount[word, dec]), 0, df_wordcount[word, dec] + 1)
df_wordcount[word, paste(case, num, sep = ".")] <- ifelse(!is.numeric(df_wordcount[word, paste(case, num, sep = ".")]), 0, df_wordcount[word, paste(case, num, sep = ".")] + 1)
}
}
df_wordcount['abellana:gensg', gen]
df_wordcount['abellana:gensg', 'f']
unlist(strsplit(read[1, 17], ','))
is.numeric(NULL)
is.numeric(NA)
read$`Declined Noun`[1]
read$`Declined Noun`[2]
read$`Declined Noun`[row]
read$`Declined Noun`[row+1]
final_info
gen
dec
case
num
word
df_wordcount[word, gen]
!is.numeric(df_wordcount[word, gen])
is.numeric(df_wordcount[word, gen])
is.numeric(NA)
!0
is.na(NA)
is.numeric(df_wordcount[word, gen])
is.na(df_wordcount[word, gen])
invalid(NA)
missing(NA)
is.numeric(df_wordcount[word, gen])
is.integer(df_wordcount[word, gen])
is.integer(0)
is.defined(0)
exists(NA)
is.finite(0)
is.finite(NA)
is.finite(null)
is.finite(NULL)
is.finite(NULL) == FALAS
is.finite(NULL) == FALSE
is.logical(NULL)
is.logical(NA)
is.logical(1)
as.logical(1)
as.logical(2)
is.na(NULL)
is.null(NA)
is.null(NULL)
is.na(NULL)
is.na(NULL) or is.na(NA)
is.na(NULL) | is.na(NA)
is.numeric(NULL)
is.numeric(NA)
is.na(NULL)
library(gtools)
install.packages(gtools)
install.packages("gtools")
library(gtools)
invalid(NA)
invalid(NULL)
is.numeric(df_wordcount[word, gen])
invalid(df_wordcount[word, gen])
invalid(df_wordcount["abellana:nomsg", gen])
!invalid(df_wordcount["abellana:nomsg", gen])
!invalid(df_wordcount["abellana:nomsg", gen])
!invalid(df_wordcount[word, gen])
files = list.files(pattern = '\\.csv')
# We want to make a data frame showing what each word became, start with counts
df_wordcount <- data.frame()
# Add counts for each word
file_originfo <- read_csv(files[1])
# Original
for (i in 1:nrow(file_originfo)) {
word <- file_originfo$`Declined Noun`[i]
df_wordcount[word, 'OrigInfo'] <- file_originfo$`0`[i]
}
# Now we want to go through files and add 1 to each change in declension and gender that takes place
for (file in files) {
read <- read_csv(file)
for (row in 1:nrow(read)) {
word <- read$`Declined Noun`[row]
# Generation 15 info (Gen, Dec, Case, Num)
final_info <- unlist(strsplit(read[row, ncol(read)], ','))
gen <- final_info[1]
dec <- final_info[2]
case <- final_info[3]
num <- final_info[4]
# Assign
df_wordcount[word, gen] <- ifelse(!invalid(df_wordcount[word, gen]), 0, df_wordcount[word, gen] + 1)
df_wordcount[word, dec] <- ifelse(!invalid(df_wordcount[word, dec]), 0, df_wordcount[word, dec] + 1)
df_wordcount[word, paste(case, num, sep = ".")] <- ifelse(!invalid(df_wordcount[word, paste(case, num, sep = ".")]), 0, df_wordcount[word, paste(case, num, sep = ".")] + 1)
}
}
View(df_wordcount)
# Now we want to go through files and add 1 to each change in declension and gender that takes place
for (file in files) {
read <- read_csv(file)
for (row in 1:nrow(read)) {
word <- read$`Declined Noun`[row]
# Generation 15 info (Gen, Dec, Case, Num)
final_info <- unlist(strsplit(read[row, ncol(read)], ','))
gen <- final_info[1]
dec <- final_info[2]
case <- final_info[3]
num <- final_info[4]
# Assign
df_wordcount[word, gen] <- ifelse(invalid(df_wordcount[word, gen]), 0, df_wordcount[word, gen] + 1)
df_wordcount[word, dec] <- ifelse(invalid(df_wordcount[word, dec]), 0, df_wordcount[word, dec] + 1)
df_wordcount[word, paste(case, num, sep = ".")] <- ifelse(invalid(df_wordcount[word, paste(case, num, sep = ".")]), 0, df_wordcount[word, paste(case, num, sep = ".")] + 1)
}
}
View(df_wordcount)
for (file in files) {
read <- read_csv(file)
for (row in 1:nrow(read)) {
word <- read$`Declined Noun`[row]
# Generation 15 info (Gen, Dec, Case, Num)
final_info <- unlist(strsplit(read[row, ncol(read)], ','))
gen <- final_info[1]
dec <- final_info[2]
case <- final_info[3]
num <- final_info[4]
# Assign
df_wordcount[word, gen] <- ifelse(invalid(df_wordcount[word, gen]), 1, df_wordcount[word, gen] + 1)
df_wordcount[word, dec] <- ifelse(invalid(df_wordcount[word, dec]), 1, df_wordcount[word, dec] + 1)
df_wordcount[word, paste(case, num, sep = ".")] <- ifelse(invalid(df_wordcount[word, paste(case, num, sep = ".")]), 1, df_wordcount[word, paste(case, num, sep = ".")] + 1)
}
}
View(df_wordcount)
files = list.files(pattern = '\\.csv')
# We want to make a data frame showing what each word became, start with counts
df_wordcount <- data.frame()
# Add counts for each word
file_originfo <- read_csv(files[1])
# Original
for (i in 1:nrow(file_originfo)) {
word <- file_originfo$`Declined Noun`[i]
df_wordcount[word, 'OrigInfo'] <- file_originfo$`0`[i]
}
# Now we want to go through files and add 1 to each change in declension and gender that takes place
for (file in files) {
read <- read_csv(file)
for (row in 1:nrow(read)) {
word <- read$`Declined Noun`[row]
# Generation 15 info (Gen, Dec, Case, Num)
final_info <- unlist(strsplit(read[row, ncol(read)], ','))
gen <- final_info[1]
dec <- final_info[2]
case <- final_info[3]
num <- final_info[4]
# Assign
df_wordcount[word, gen] <- ifelse(invalid(df_wordcount[word, gen]), 1, df_wordcount[word, gen] + 1)
df_wordcount[word, dec] <- ifelse(invalid(df_wordcount[word, dec]), 1, df_wordcount[word, dec] + 1)
df_wordcount[word, paste(case, num, sep = ".")] <- ifelse(invalid(df_wordcount[word, paste(case, num, sep = ".")]), 1, df_wordcount[word, paste(case, num, sep = ".")] + 1)
}
}
View(df_wordcount)
df_wordpercent <- df_wordcount/50*100
df_wordpercent <- cbind(df_wordcount$OrigInfo, df_wordcount[2:ncol(df_wordcount)]/50*100)
View(df_wordpercent)
?which
which(df_wordpercent$`df_wordcount$OrigInfo`) == 1
which(df_wordpercent$`df_wordcount$OrigInfo` == 1)
which(df_wordpercent$f == 1)
which(df_wordpercent$f == 50)
df_wordpercent[which(df_wordpercent$f == 50)]
df_wordpercent[which(df_wordpercent$f == 50), ]
df_wordpercent[df_wordpercent$f == 50, ]
df_wordpercent$f == 50
df_wordpercent$f == 100
df_wordpercent[is.na(df_wordpercent)] <- 0
View(df_wordpercent)
df_wordpercent$f == 100
df_wordpercent$f == 100
df_wordpercent[df_wordpercent$f == 100, ]
View[df_wordpercent[df_wordpercent$f == 100, ]]
View(df_wordpercent[df_wordpercent$f == 100, ])
file_originfo$`Declined Noun`
file_originfo$`Declined Noun`[i]
file_originfo$`0`[i]
strsplit(file_originfo$`0`[i], ',')
strsplit(file_originfo$`0`[i], ',')[1]
unlist(strsplit(file_originfo$`0`[i], ','))[1]
source('~/Documents/Documents/Linguistics/Papers/Romanian Slavic Contact/GenDecCaseNum/changes.R', echo=TRUE)
View(df_wordpercent)
df_wordpercent[df_wordpercent$Gender == "f"]
df_wordpercent[df_wordpercent$Gender == "f", ]
df_wordpercent[df_wordpercent$Gender == "f" & df_wordpercent$f < 90, ]
View(df_wordpercent[df_wordpercent$Gender == "f" & df_wordpercent$f < 90, ])
View(df_wordpercent[df_wordpercent$Gender == "f" & df_wordpercent$f < 90 & df_wordpercent$Declension == 1, ])
View(df_wordpercent[df_wordpercent$Gender == "f" & df_wordpercent$f < 90 & df_wordpercent$Declension == I, ])
View(df_wordpercent[df_wordpercent$Gender == "f" & df_wordpercent$f < 90 & df_wordpercent$Declension == "I", ])
fI <- df_wordpercent[df_wordpercent$Gender == "f" & df_wordpercent$f < 90 & df_wordpercent$Declension == "I", ]
View(fI)
IV <- df_wordpercent[df_wordpercent$Declension == "IV", ]
V <- df_wordpercent[df_wordpercent$Declension == "V", ]
View(IV)
View(V)
mII <- df_wordpercent[df_wordpercent$Gender == "m" & df_wordpercent$Declension == "II" & df_wordpercent$m < 90, ]
View(mII)
mII <- df_wordpercent[df_wordpercent$Gender == "m" & df_wordpercent$Declension == "II" & df_wordpercent$f > 10, ]
View(mII)
nII <- df_wordpercent[df_wordpercent$Gender == "n" & df_wordpercent$Declension == "II" & df_wordpercent$f > 10, ]
View(nII)
# Masculine III nouns
mIII <- df_wordpercent[df_wordpercent$Gender == "m" & df_wordpercent$Declension == "III", ]
View(mIII)
setwd("~/Documents/Documents/Linguistics/Papers/Romanian Slavic Contact/RSDC/Gen15RomFSlavF_Hierarchy_Features1")
source('~/Documents/Documents/Linguistics/Papers/Romanian Slavic Contact/GenDecCaseNum/analyze.R', echo=TRUE)
plot_var <- "NSG to MSG"
ggplot(df_percents, aes(x=Generation, y=nsgTOmsg))+
geom_line(aes(color=Trial))+
scale_x_discrete(breaks = seq(from=1, to=max(df_percents$Generation), by=1))+
scale_y_continuous(limits=c(0,1))+
xlab("Generation") + ylab(paste("% of", plot_var))+
theme(axis.text=element_text(size=30),
axis.title=element_text(size=40, vjust=1),
plot.title=element_text(size=50),
legend.position="none")+
ggtitle(plot_var)
plot_var <- "NPL to FPL"
ggplot(df_percents, aes(x=Generation, y=nplTOfpl))+
geom_line(aes(color=Trial))+
scale_x_discrete(breaks = seq(from=1, to=max(df_percents$Generation), by=1))+
scale_y_continuous(limits=c(0,1))+
xlab("Generation") + ylab(paste("% of", plot_var))+
theme(axis.text=element_text(size=30),
axis.title=element_text(size=40, vjust=1),
plot.title=element_text(size=50),
legend.position="none")+
ggtitle(plot_var)
plot_var <- "NPL to FSG"
ggplot(df_percents, aes(x=Generation, y=nplTOfsg))+
geom_line(aes(color=Trial))+
scale_x_discrete(breaks = seq(from=1, to=max(df_percents$Generation), by=1))+
scale_y_continuous(limits=c(0,1))+
xlab("Generation") + ylab(paste("% of", plot_var))+
theme(axis.text=element_text(size=30),
axis.title=element_text(size=40, vjust=1),
plot.title=element_text(size=50),
legend.position="none")+
ggtitle(plot_var)
View(V)
# Neuter II nouns:
nII <- df_wordpercent[df_wordpercent$Gender == "n" & df_wordpercent$Declension == "II", ]
View(nII)
nIII <- df_wordpercent[df_wordpercent$Gender == "n" & df_wordpercent$Declension == "III", ]
View(nIII)
fIII <- df_wordpercent[df_wordpercent$Gender == "f" & df_wordpercent$Declension == "III", ]
View(fIII)
